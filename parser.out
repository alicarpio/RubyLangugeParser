Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND_OP
    CASE
    CLASS
    CLASS_NAME
    COLON
    COMMENT
    DEF
    DIVIDE
    DO
    DOT
    EACH
    ELSE
    ELSIF
    END
    EQ
    FALSE
    FOR
    GE
    GT
    HASHROCKET
    IF
    INITIALIZE
    LBRACKET
    LE
    LPAREN
    LSQBRACKET
    LT
    MINUS
    MODULE
    MULTIPLY
    NE
    NEW
    NOT_OP
    NULL
    OR_OP
    PIPE
    PLUS
    POWER
    RBRACKET
    RPAREN
    RSQBRACKET
    SEMICOLON
    SYMBOL
    TRUE
    UNLESS
    UNTIL
    VARIABLE_CLASE
    VARIABLE_CONSTANTE
    VARIABLE_GLOBAL
    VARIABLE_INSTANCIA
    VARIABLE_LOCAL
    WHEN
    WHILE

Grammar

Rule 0     S' -> asignacion
Rule 1     asignacion -> NAME EQUALS valor
Rule 2     valor -> STRING
Rule 3     valor -> INTEGER
Rule 4     valor -> FLOAT
Rule 5     valor -> NAME
Rule 6     impresion -> PUTS argumentos_opt
Rule 7     argumentos_opt -> argumentos
Rule 8     argumentos_opt -> empty
Rule 9     argumentos -> argumento
Rule 10    argumentos -> argumento COMA argumentos
Rule 11    argumento -> STRING
Rule 12    argumento -> INTEGER
Rule 13    argumento -> FLOAT
Rule 14    argumento -> NAME
Rule 15    empty -> <empty>

Terminals, with rules where they appear

AND_OP               : 
CASE                 : 
CLASS                : 
CLASS_NAME           : 
COLON                : 
COMA                 : 10
COMMENT              : 
DEF                  : 
DIVIDE               : 
DO                   : 
DOT                  : 
EACH                 : 
ELSE                 : 
ELSIF                : 
END                  : 
EQ                   : 
EQUALS               : 1
FALSE                : 
FLOAT                : 4 13
FOR                  : 
GE                   : 
GT                   : 
HASHROCKET           : 
IF                   : 
INITIALIZE           : 
INTEGER              : 3 12
LBRACKET             : 
LE                   : 
LPAREN               : 
LSQBRACKET           : 
LT                   : 
MINUS                : 
MODULE               : 
MULTIPLY             : 
NAME                 : 1 5 14
NE                   : 
NEW                  : 
NOT_OP               : 
NULL                 : 
OR_OP                : 
PIPE                 : 
PLUS                 : 
POWER                : 
PUTS                 : 6
RBRACKET             : 
RPAREN               : 
RSQBRACKET           : 
SEMICOLON            : 
STRING               : 2 11
SYMBOL               : 
TRUE                 : 
UNLESS               : 
UNTIL                : 
VARIABLE_CLASE       : 
VARIABLE_CONSTANTE   : 
VARIABLE_GLOBAL      : 
VARIABLE_INSTANCIA   : 
VARIABLE_LOCAL       : 
WHEN                 : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

argumento            : 9 10
argumentos           : 7 10
argumentos_opt       : 6
asignacion           : 0
empty                : 8
impresion            : 
valor                : 1

Parsing method: LALR

state 0

    (0) S' -> . asignacion
    (1) asignacion -> . NAME EQUALS valor

    NAME            shift and go to state 2

    asignacion                     shift and go to state 1

state 1

    (0) S' -> asignacion .



state 2

    (1) asignacion -> NAME . EQUALS valor

    EQUALS          shift and go to state 3


state 3

    (1) asignacion -> NAME EQUALS . valor
    (2) valor -> . STRING
    (3) valor -> . INTEGER
    (4) valor -> . FLOAT
    (5) valor -> . NAME

    STRING          shift and go to state 6
    INTEGER         shift and go to state 7
    FLOAT           shift and go to state 8
    NAME            shift and go to state 4

    valor                          shift and go to state 5

state 4

    (5) valor -> NAME .

    $end            reduce using rule 5 (valor -> NAME .)


state 5

    (1) asignacion -> NAME EQUALS valor .

    $end            reduce using rule 1 (asignacion -> NAME EQUALS valor .)


state 6

    (2) valor -> STRING .

    $end            reduce using rule 2 (valor -> STRING .)


state 7

    (3) valor -> INTEGER .

    $end            reduce using rule 3 (valor -> INTEGER .)


state 8

    (4) valor -> FLOAT .

    $end            reduce using rule 4 (valor -> FLOAT .)

