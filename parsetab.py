
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND_OP CASE CHOMP CLASS CLASS_NAME COLON COMA COMMENT DEF DIVIDE DO DOT EACH ELSE ELSIF END EQ EQUALS FALSE FLOAT FOR GE GETS GT HASHROCKET IF INITIALIZE INTEGER LBRACKET LE LPAREN LSQBRACKET LT MINUS MODULE MULTIPLY NAME NE NEW NEWLINE NOT_OP NULL OR_OP PIPE PLUS POWER PUTS RBRACKET RETURN RPAREN RSQBRACKET SEMICOLON STRING SYMBOL TRUE UNLESS UNTIL VARIABLE_CLASE VARIABLE_CONSTANTE VARIABLE_GLOBAL VARIABLE_INSTANCIA VARIABLE_LOCAL WHEN WHILEprogram : code_listcode_list : code\n                 | code code_listcode : asignacion\n            | impresion\n            | if_statement\n            | while_statement\n            | instantiation\n            | solicitud_entrada\n            | function_definition\n            | class_definitionasignacion : NAME EQUALS valor\n                  | VARIABLE_GLOBAL EQUALS valor\n                  | VARIABLE_CLASE EQUALS valor\n                  | VARIABLE_INSTANCIA EQUALS valor\n                  | VARIABLE_LOCAL EQUALS valorcall_method : NAME LPAREN argumentos_opt RPARENimpresion : PUTS argumentos_optsolicitud_entrada : PUTS STRING\n                         | NAME EQUALS GETS DOT CHOMP\n    argumentos_opt : argumentos\n                      | emptyargumentos : valor\n                  | valor COMA argumentosvalor : operand\n             | STRING\n             | NULL\n             | SYMBOL\n             | boolean\n             | lists\n             | operation\n             | condition\n             | expression\n             | hash\n             | call_method\n    expression : expression operatorArithm operand\n                  | operandoperand : INTEGER\n               | FLOAT\n               | NAMEoperatorArithm : PLUS\n                | MINUS\n                | MULTIPLY\n                | DIVIDE\n                | MODULE\n                power_op : INTEGER POWER INTEGERlists : LBRACKET argumentos RBRACKET\n             | LSQBRACKET argumentos RSQBRACKEThash : LBRACKET pares_hash RBRACKET\n            | LBRACKET empty RBRACKETpares_hash : par_hash\n                  | par_hash COMA pares_hashpar_hash : clave HASHROCKET valor\n                | clave COLON valorclave : SYMBOL\n             | STRINGboolean : TRUE\n                | FALSEoperation : operand operatorArithm operand\n                 | operand operatorArithm operation\n    if_statement : IF condition block END\n                 | IF condition block ELSE block END\n                 | IF condition block ELSIF condition block END\n                 | IF condition block ELSIF condition block ELSE block ENDwhile_statement : WHILE condition block ENDcomparison : valor comparator valor block : statement\n              | statement block statement : asignacion\n            | impresion\n            | if_statement\n            | while_statement\n            | instantiation\n            | returnreturn : RETURN argumentoscondition : comparison\n                 | boolean\n                 | NOT_OP comparison\n                 | comparison operatorCond comparisonoperatorCond : AND_OP\n                    | OR_OPcond : valor comparator valor\n            | LPAREN comparison RPAREN\n    class_definition : CLASS CLASS_NAME body END\n    \n    instantiation : CLASS_NAME NEW LPAREN argumentos RPAREN\n    comparator : EQ\n                  | NE\n                  | LT\n                  | LE\n                  | GT\n                  | GEempty :\n    function_definition : DEF NAME LPAREN parameters RPAREN body END\n                        | DEF NAME body END\n    \n    parameters : NAME\n               | NAME COMA parameters\n               | empty\n    \n    body : statement\n         | statement body\n    '
    
_lr_action_items = {'NAME':([0,3,4,5,6,7,8,9,10,11,17,18,19,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,91,92,93,94,96,97,98,99,100,101,102,104,105,107,108,110,113,114,115,116,117,118,120,121,122,124,125,126,127,128,129,130,132,133,134,139,141,142,143,150,151,152,153,154,158,159,160,162,],[12,12,-4,-5,-6,-7,-8,-9,-10,-11,46,46,46,59,46,46,46,46,46,-18,-19,-21,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,46,46,-76,46,103,-77,-26,103,103,103,-12,-13,-14,-15,-16,46,46,-86,-87,-88,-89,-90,-91,117,-41,-42,-43,-44,-45,117,46,46,-80,-81,-78,103,-69,-70,-71,-72,-73,-74,46,46,46,136,103,-24,-66,-59,-60,-40,-36,-47,-49,-50,46,46,-48,-79,-61,103,46,46,-75,-65,-94,-84,-20,-17,103,-85,136,103,-62,-63,103,-93,-64,]),'VARIABLE_GLOBAL':([0,3,4,5,6,7,8,9,10,11,17,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,57,59,60,61,63,64,65,66,94,96,97,98,99,100,101,102,104,110,113,114,115,116,117,118,120,121,122,126,127,128,129,133,134,139,141,142,143,150,151,153,154,158,159,160,162,],[13,13,-4,-5,-6,-7,-8,-9,-10,-11,-92,-18,-19,-21,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,13,-77,-26,13,13,13,-12,-13,-14,-15,-16,-78,13,-69,-70,-71,-72,-73,-74,-92,13,-24,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,-61,13,-75,-65,-94,-84,-20,-17,13,-85,13,-62,-63,13,-93,-64,]),'VARIABLE_CLASE':([0,3,4,5,6,7,8,9,10,11,17,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,57,59,60,61,63,64,65,66,94,96,97,98,99,100,101,102,104,110,113,114,115,116,117,118,120,121,122,126,127,128,129,133,134,139,141,142,143,150,151,153,154,158,159,160,162,],[14,14,-4,-5,-6,-7,-8,-9,-10,-11,-92,-18,-19,-21,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,14,-77,-26,14,14,14,-12,-13,-14,-15,-16,-78,14,-69,-70,-71,-72,-73,-74,-92,14,-24,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,-61,14,-75,-65,-94,-84,-20,-17,14,-85,14,-62,-63,14,-93,-64,]),'VARIABLE_INSTANCIA':([0,3,4,5,6,7,8,9,10,11,17,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,57,59,60,61,63,64,65,66,94,96,97,98,99,100,101,102,104,110,113,114,115,116,117,118,120,121,122,126,127,128,129,133,134,139,141,142,143,150,151,153,154,158,159,160,162,],[15,15,-4,-5,-6,-7,-8,-9,-10,-11,-92,-18,-19,-21,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,15,-77,-26,15,15,15,-12,-13,-14,-15,-16,-78,15,-69,-70,-71,-72,-73,-74,-92,15,-24,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,-61,15,-75,-65,-94,-84,-20,-17,15,-85,15,-62,-63,15,-93,-64,]),'VARIABLE_LOCAL':([0,3,4,5,6,7,8,9,10,11,17,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,57,59,60,61,63,64,65,66,94,96,97,98,99,100,101,102,104,110,113,114,115,116,117,118,120,121,122,126,127,128,129,133,134,139,141,142,143,150,151,153,154,158,159,160,162,],[16,16,-4,-5,-6,-7,-8,-9,-10,-11,-92,-18,-19,-21,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,16,-77,-26,16,16,16,-12,-13,-14,-15,-16,-78,16,-69,-70,-71,-72,-73,-74,-92,16,-24,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,-61,16,-75,-65,-94,-84,-20,-17,16,-85,16,-62,-63,16,-93,-64,]),'PUTS':([0,3,4,5,6,7,8,9,10,11,17,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,57,59,60,61,63,64,65,66,94,96,97,98,99,100,101,102,104,110,113,114,115,116,117,118,120,121,122,126,127,128,129,133,134,139,141,142,143,150,151,153,154,158,159,160,162,],[17,17,-4,-5,-6,-7,-8,-9,-10,-11,-92,-18,-19,-21,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,104,-77,-26,104,104,104,-12,-13,-14,-15,-16,-78,104,-69,-70,-71,-72,-73,-74,-92,104,-24,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,-61,104,-75,-65,-94,-84,-20,-17,104,-85,104,-62,-63,104,-93,-64,]),'IF':([0,3,4,5,6,7,8,9,10,11,17,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,57,59,60,61,63,64,65,66,94,96,97,98,99,100,101,102,104,110,113,114,115,116,117,118,120,121,122,126,127,128,129,133,134,139,141,142,143,150,151,153,154,158,159,160,162,],[18,18,-4,-5,-6,-7,-8,-9,-10,-11,-92,-18,-19,-21,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,18,-77,-26,18,18,18,-12,-13,-14,-15,-16,-78,18,-69,-70,-71,-72,-73,-74,-92,18,-24,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,-61,18,-75,-65,-94,-84,-20,-17,18,-85,18,-62,-63,18,-93,-64,]),'WHILE':([0,3,4,5,6,7,8,9,10,11,17,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,57,59,60,61,63,64,65,66,94,96,97,98,99,100,101,102,104,110,113,114,115,116,117,118,120,121,122,126,127,128,129,133,134,139,141,142,143,150,151,153,154,158,159,160,162,],[19,19,-4,-5,-6,-7,-8,-9,-10,-11,-92,-18,-19,-21,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,19,-77,-26,19,19,19,-12,-13,-14,-15,-16,-78,19,-69,-70,-71,-72,-73,-74,-92,19,-24,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,-61,19,-75,-65,-94,-84,-20,-17,19,-85,19,-62,-63,19,-93,-64,]),'CLASS_NAME':([0,3,4,5,6,7,8,9,10,11,17,22,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,57,59,60,61,63,64,65,66,94,96,97,98,99,100,101,102,104,110,113,114,115,116,117,118,120,121,122,126,127,128,129,133,134,139,141,142,143,150,151,153,154,158,159,160,162,],[20,20,-4,-5,-6,-7,-8,-9,-10,-11,-92,60,-18,-19,-21,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,20,-77,-26,20,20,20,-12,-13,-14,-15,-16,-78,20,-69,-70,-71,-72,-73,-74,-92,20,-24,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,-61,20,-75,-65,-94,-84,-20,-17,20,-85,20,-62,-63,20,-93,-64,]),'DEF':([0,3,4,5,6,7,8,9,10,11,17,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,61,63,64,65,66,94,113,114,115,116,117,118,120,121,122,126,127,128,134,139,141,142,143,151,154,158,160,162,],[21,21,-4,-5,-6,-7,-8,-9,-10,-11,-92,-18,-19,-21,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,-26,-12,-13,-14,-15,-16,-78,-24,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,-61,-65,-94,-84,-20,-17,-85,-62,-63,-93,-64,]),'CLASS':([0,3,4,5,6,7,8,9,10,11,17,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,61,63,64,65,66,94,113,114,115,116,117,118,120,121,122,126,127,128,134,139,141,142,143,151,154,158,160,162,],[22,22,-4,-5,-6,-7,-8,-9,-10,-11,-92,-18,-19,-21,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,-26,-12,-13,-14,-15,-16,-78,-24,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,-61,-65,-94,-84,-20,-17,-85,-62,-63,-93,-64,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,17,23,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,61,63,64,65,66,94,113,114,115,116,117,118,120,121,122,126,127,128,134,139,141,142,143,151,154,158,160,162,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-10,-11,-92,-3,-18,-19,-21,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,-26,-12,-13,-14,-15,-16,-78,-24,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,-61,-65,-94,-84,-20,-17,-85,-62,-63,-93,-64,]),'EQUALS':([12,13,14,15,16,103,],[24,25,26,27,28,132,]),'STRING':([17,18,19,24,25,26,27,28,49,50,52,67,68,69,70,71,72,73,74,82,91,92,93,104,105,107,123,124,125,130,132,],[30,56,56,56,56,56,56,56,87,56,56,56,56,-86,-87,-88,-89,-90,-91,56,56,-80,-81,56,56,56,146,56,56,56,56,]),'NULL':([17,18,19,24,25,26,27,28,49,50,52,67,68,69,70,71,72,73,74,82,91,92,93,104,105,107,124,125,130,132,],[35,35,35,35,35,35,35,35,35,35,35,35,35,-86,-87,-88,-89,-90,-91,35,35,-80,-81,35,35,35,35,35,35,35,]),'SYMBOL':([17,18,19,24,25,26,27,28,49,50,52,67,68,69,70,71,72,73,74,82,91,92,93,104,105,107,123,124,125,130,132,],[36,36,36,36,36,36,36,36,88,36,36,36,36,-86,-87,-88,-89,-90,-91,36,36,-80,-81,36,36,36,145,36,36,36,36,]),'INTEGER':([17,18,19,24,25,26,27,28,49,50,52,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,91,92,93,104,105,107,124,125,130,132,],[44,44,44,44,44,44,44,44,44,44,44,44,44,-86,-87,-88,-89,-90,-91,44,-41,-42,-43,-44,-45,44,44,44,-80,-81,44,44,44,44,44,44,44,]),'FLOAT':([17,18,19,24,25,26,27,28,49,50,52,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,91,92,93,104,105,107,124,125,130,132,],[45,45,45,45,45,45,45,45,45,45,45,45,45,-86,-87,-88,-89,-90,-91,45,-41,-42,-43,-44,-45,45,45,45,-80,-81,45,45,45,45,45,45,45,]),'TRUE':([17,18,19,24,25,26,27,28,49,50,52,67,68,69,70,71,72,73,74,82,91,92,93,104,105,107,124,125,130,132,],[47,47,47,47,47,47,47,47,47,47,47,47,47,-86,-87,-88,-89,-90,-91,47,47,-80,-81,47,47,47,47,47,47,47,]),'FALSE':([17,18,19,24,25,26,27,28,49,50,52,67,68,69,70,71,72,73,74,82,91,92,93,104,105,107,124,125,130,132,],[48,48,48,48,48,48,48,48,48,48,48,48,48,-86,-87,-88,-89,-90,-91,48,48,-80,-81,48,48,48,48,48,48,48,]),'LBRACKET':([17,18,19,24,25,26,27,28,49,50,52,67,68,69,70,71,72,73,74,82,91,92,93,104,105,107,124,125,130,132,],[49,49,49,49,49,49,49,49,49,49,49,49,49,-86,-87,-88,-89,-90,-91,49,49,-80,-81,49,49,49,49,49,49,49,]),'LSQBRACKET':([17,18,19,24,25,26,27,28,49,50,52,67,68,69,70,71,72,73,74,82,91,92,93,104,105,107,124,125,130,132,],[50,50,50,50,50,50,50,50,50,50,50,50,50,-86,-87,-88,-89,-90,-91,50,50,-80,-81,50,50,50,50,50,50,50,]),'NOT_OP':([17,18,19,24,25,26,27,28,49,50,52,67,68,69,70,71,72,73,74,82,91,92,93,104,105,107,124,125,130,132,],[52,52,52,52,52,52,52,52,52,52,52,52,52,-86,-87,-88,-89,-90,-91,52,52,-80,-81,52,52,52,52,52,52,52,]),'NEW':([20,],[58,]),'GETS':([24,],[62,]),'RETURN':([29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,56,57,59,60,61,63,64,65,66,94,96,97,98,99,100,101,102,104,110,113,114,115,116,117,118,120,121,122,126,127,128,129,133,134,143,150,151,153,154,158,159,162,],[-18,-21,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,105,-77,-26,105,105,105,-12,-13,-14,-15,-16,-78,105,-69,-70,-71,-72,-73,-74,-92,105,-24,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,-61,105,-75,-65,-17,105,-85,105,-62,-63,105,-64,]),'END':([29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,61,63,64,65,66,94,95,96,97,98,99,100,101,102,104,106,109,110,111,113,114,115,116,117,118,120,121,122,126,127,128,131,133,134,140,143,149,151,154,155,157,158,161,162,],[-18,-21,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,-26,-12,-13,-14,-15,-16,-78,128,-67,-69,-70,-71,-72,-73,-74,-92,134,139,-98,141,-24,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,-61,-68,-75,-65,-99,-17,154,-85,-62,158,160,-63,162,-64,]),'ELSE':([29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,61,63,64,65,66,94,95,96,97,98,99,100,101,102,104,113,114,115,116,117,118,120,121,122,126,127,128,131,133,134,143,151,154,155,158,162,],[-18,-21,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,-26,-12,-13,-14,-15,-16,-78,129,-67,-69,-70,-71,-72,-73,-74,-92,-24,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,-61,-68,-75,-65,-17,-85,-62,159,-63,-64,]),'ELSIF':([29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,61,63,64,65,66,94,95,96,97,98,99,100,101,102,104,113,114,115,116,117,118,120,121,122,126,127,128,131,133,134,143,151,154,158,162,],[-18,-21,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,-26,-12,-13,-14,-15,-16,-78,130,-67,-69,-70,-71,-72,-73,-74,-92,-24,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,-61,-68,-75,-65,-17,-85,-62,-63,-64,]),'COMA':([30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,86,87,88,94,114,115,116,117,118,120,121,122,126,127,136,143,147,148,],[-26,67,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,-26,123,-26,-28,-78,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,152,-17,-53,-54,]),'EQ':([30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,55,56,57,61,63,64,65,66,87,88,94,114,115,116,117,118,120,121,122,126,127,143,147,148,150,],[-26,69,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,-32,-29,69,-26,-32,69,69,69,69,69,-26,-28,-76,69,-59,-60,-40,-36,-47,-49,-50,-48,-76,-17,69,69,-32,]),'NE':([30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,55,56,57,61,63,64,65,66,87,88,94,114,115,116,117,118,120,121,122,126,127,143,147,148,150,],[-26,70,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,-32,-29,70,-26,-32,70,70,70,70,70,-26,-28,-76,70,-59,-60,-40,-36,-47,-49,-50,-48,-76,-17,70,70,-32,]),'LT':([30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,55,56,57,61,63,64,65,66,87,88,94,114,115,116,117,118,120,121,122,126,127,143,147,148,150,],[-26,71,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,-32,-29,71,-26,-32,71,71,71,71,71,-26,-28,-76,71,-59,-60,-40,-36,-47,-49,-50,-48,-76,-17,71,71,-32,]),'LE':([30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,55,56,57,61,63,64,65,66,87,88,94,114,115,116,117,118,120,121,122,126,127,143,147,148,150,],[-26,72,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,-32,-29,72,-26,-32,72,72,72,72,72,-26,-28,-76,72,-59,-60,-40,-36,-47,-49,-50,-48,-76,-17,72,72,-32,]),'GT':([30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,55,56,57,61,63,64,65,66,87,88,94,114,115,116,117,118,120,121,122,126,127,143,147,148,150,],[-26,73,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,-32,-29,73,-26,-32,73,73,73,73,73,-26,-28,-76,73,-59,-60,-40,-36,-47,-49,-50,-48,-76,-17,73,73,-32,]),'GE':([30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,53,54,55,56,57,61,63,64,65,66,87,88,94,114,115,116,117,118,120,121,122,126,127,143,147,148,150,],[-26,74,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,-32,-29,74,-26,-32,74,74,74,74,74,-26,-28,-76,74,-59,-60,-40,-36,-47,-49,-50,-48,-76,-17,74,74,-32,]),'RPAREN':([31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,82,94,108,113,114,115,116,117,118,119,120,121,122,126,127,135,136,137,138,143,152,156,],[-21,-22,-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,-26,-92,-78,-92,-24,-66,-59,-60,-40,-36,143,-47,-49,-50,-48,-79,151,-95,153,-97,-17,-92,-96,]),'RBRACKET':([33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,56,83,84,85,86,87,88,94,113,114,115,116,117,118,120,121,122,126,127,143,144,147,148,],[-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-92,-76,-26,120,121,122,-51,-26,-28,-78,-24,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,-17,-52,-53,-54,]),'RSQBRACKET':([33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,90,94,113,114,115,116,117,118,120,121,122,126,127,143,],[-23,-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,-76,-26,126,-78,-24,-66,-59,-60,-40,-36,-47,-49,-50,-48,-79,-17,]),'AND_OP':([34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,94,114,115,116,117,118,120,121,122,126,127,143,],[-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,92,-26,92,-66,-59,-60,-40,-36,-47,-49,-50,-48,92,-17,]),'OR_OP':([34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,51,56,94,114,115,116,117,118,120,121,122,126,127,143,],[-25,-27,-28,-29,-30,-31,-32,-33,-34,-35,-38,-39,-40,-57,-58,93,-26,93,-66,-59,-60,-40,-36,-47,-49,-50,-48,93,-17,]),'PLUS':([34,41,44,45,46,115,117,118,],[76,76,-38,-39,-40,76,-40,-36,]),'MINUS':([34,41,44,45,46,115,117,118,],[77,77,-38,-39,-40,77,-40,-36,]),'MULTIPLY':([34,41,44,45,46,115,117,118,],[78,78,-38,-39,-40,78,-40,-36,]),'DIVIDE':([34,41,44,45,46,115,117,118,],[79,79,-38,-39,-40,79,-40,-36,]),'MODULE':([34,41,44,45,46,115,117,118,],[80,80,-38,-39,-40,80,-40,-36,]),'LPAREN':([46,58,59,],[82,107,108,]),'DOT':([62,],[112,]),'HASHROCKET':([87,88,89,145,146,],[-56,-55,124,-55,-56,]),'COLON':([87,88,89,145,146,],[-56,-55,125,-55,-56,]),'CHOMP':([112,],[142,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'code_list':([0,3,],[2,23,]),'code':([0,3,],[3,3,]),'asignacion':([0,3,53,57,59,60,96,110,129,150,153,159,],[4,4,97,97,97,97,97,97,97,97,97,97,]),'impresion':([0,3,53,57,59,60,96,110,129,150,153,159,],[5,5,98,98,98,98,98,98,98,98,98,98,]),'if_statement':([0,3,53,57,59,60,96,110,129,150,153,159,],[6,6,99,99,99,99,99,99,99,99,99,99,]),'while_statement':([0,3,53,57,59,60,96,110,129,150,153,159,],[7,7,100,100,100,100,100,100,100,100,100,100,]),'instantiation':([0,3,53,57,59,60,96,110,129,150,153,159,],[8,8,101,101,101,101,101,101,101,101,101,101,]),'solicitud_entrada':([0,3,],[9,9,]),'function_definition':([0,3,],[10,10,]),'class_definition':([0,3,],[11,11,]),'argumentos_opt':([17,82,104,],[29,119,29,]),'argumentos':([17,49,50,67,82,104,105,107,],[31,83,90,113,31,31,133,135,]),'empty':([17,49,82,104,108,152,],[32,85,32,32,138,138,]),'valor':([17,18,19,24,25,26,27,28,49,50,52,67,68,82,91,104,105,107,124,125,130,132,],[33,55,55,61,63,64,65,66,33,33,55,33,114,33,55,33,33,33,147,148,55,61,]),'operand':([17,18,19,24,25,26,27,28,49,50,52,67,68,75,81,82,91,104,105,107,124,125,130,132,],[34,34,34,34,34,34,34,34,34,34,34,34,34,115,118,34,34,34,34,34,34,34,34,34,]),'boolean':([17,18,19,24,25,26,27,28,49,50,52,67,68,82,91,104,105,107,124,125,130,132,],[37,54,54,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,54,37,]),'lists':([17,18,19,24,25,26,27,28,49,50,52,67,68,82,91,104,105,107,124,125,130,132,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'operation':([17,18,19,24,25,26,27,28,49,50,52,67,68,75,82,91,104,105,107,124,125,130,132,],[39,39,39,39,39,39,39,39,39,39,39,39,39,116,39,39,39,39,39,39,39,39,39,]),'condition':([17,18,19,24,25,26,27,28,49,50,52,67,68,82,91,104,105,107,124,125,130,132,],[40,53,57,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,150,40,]),'expression':([17,18,19,24,25,26,27,28,49,50,52,67,68,82,91,104,105,107,124,125,130,132,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'hash':([17,18,19,24,25,26,27,28,49,50,52,67,68,82,91,104,105,107,124,125,130,132,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'call_method':([17,18,19,24,25,26,27,28,49,50,52,67,68,82,91,104,105,107,124,125,130,132,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'comparison':([17,18,19,24,25,26,27,28,49,50,52,67,68,82,91,104,105,107,124,125,130,132,],[51,51,51,51,51,51,51,51,51,51,94,51,51,51,127,51,51,51,51,51,51,51,]),'comparator':([33,55,61,63,64,65,66,114,147,148,],[68,68,68,68,68,68,68,68,68,68,]),'operatorArithm':([34,41,115,],[75,81,75,]),'pares_hash':([49,123,],[84,144,]),'par_hash':([49,123,],[86,86,]),'clave':([49,123,],[89,89,]),'operatorCond':([51,94,127,],[91,91,91,]),'block':([53,57,96,129,150,159,],[95,106,131,149,155,161,]),'statement':([53,57,59,60,96,110,129,150,153,159,],[96,96,110,110,96,110,96,96,110,96,]),'return':([53,57,59,60,96,110,129,150,153,159,],[102,102,102,102,102,102,102,102,102,102,]),'body':([59,60,110,153,],[109,111,140,157,]),'parameters':([108,152,],[137,156,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> code_list','program',1,'p_program','Syntactic.py',11),
  ('code_list -> code','code_list',1,'p_code_list','Syntactic.py',14),
  ('code_list -> code code_list','code_list',2,'p_code_list','Syntactic.py',15),
  ('code -> asignacion','code',1,'p_code','Syntactic.py',19),
  ('code -> impresion','code',1,'p_code','Syntactic.py',20),
  ('code -> if_statement','code',1,'p_code','Syntactic.py',21),
  ('code -> while_statement','code',1,'p_code','Syntactic.py',22),
  ('code -> instantiation','code',1,'p_code','Syntactic.py',23),
  ('code -> solicitud_entrada','code',1,'p_code','Syntactic.py',24),
  ('code -> function_definition','code',1,'p_code','Syntactic.py',25),
  ('code -> class_definition','code',1,'p_code','Syntactic.py',26),
  ('asignacion -> NAME EQUALS valor','asignacion',3,'p_asignacion','Syntactic.py',31),
  ('asignacion -> VARIABLE_GLOBAL EQUALS valor','asignacion',3,'p_asignacion','Syntactic.py',32),
  ('asignacion -> VARIABLE_CLASE EQUALS valor','asignacion',3,'p_asignacion','Syntactic.py',33),
  ('asignacion -> VARIABLE_INSTANCIA EQUALS valor','asignacion',3,'p_asignacion','Syntactic.py',34),
  ('asignacion -> VARIABLE_LOCAL EQUALS valor','asignacion',3,'p_asignacion','Syntactic.py',35),
  ('call_method -> NAME LPAREN argumentos_opt RPAREN','call_method',4,'p_call_method','Syntactic.py',38),
  ('impresion -> PUTS argumentos_opt','impresion',2,'p_impresion','Syntactic.py',41),
  ('solicitud_entrada -> PUTS STRING','solicitud_entrada',2,'p_solicitud_entrada','Syntactic.py',44),
  ('solicitud_entrada -> NAME EQUALS GETS DOT CHOMP','solicitud_entrada',5,'p_solicitud_entrada','Syntactic.py',45),
  ('argumentos_opt -> argumentos','argumentos_opt',1,'p_argumentos_opt','Syntactic.py',49),
  ('argumentos_opt -> empty','argumentos_opt',1,'p_argumentos_opt','Syntactic.py',50),
  ('argumentos -> valor','argumentos',1,'p_argumentos','Syntactic.py',53),
  ('argumentos -> valor COMA argumentos','argumentos',3,'p_argumentos','Syntactic.py',54),
  ('valor -> operand','valor',1,'p_valor','Syntactic.py',57),
  ('valor -> STRING','valor',1,'p_valor','Syntactic.py',58),
  ('valor -> NULL','valor',1,'p_valor','Syntactic.py',59),
  ('valor -> SYMBOL','valor',1,'p_valor','Syntactic.py',60),
  ('valor -> boolean','valor',1,'p_valor','Syntactic.py',61),
  ('valor -> lists','valor',1,'p_valor','Syntactic.py',62),
  ('valor -> operation','valor',1,'p_valor','Syntactic.py',63),
  ('valor -> condition','valor',1,'p_valor','Syntactic.py',64),
  ('valor -> expression','valor',1,'p_valor','Syntactic.py',65),
  ('valor -> hash','valor',1,'p_valor','Syntactic.py',66),
  ('valor -> call_method','valor',1,'p_valor','Syntactic.py',67),
  ('expression -> expression operatorArithm operand','expression',3,'p_expression','Syntactic.py',71),
  ('expression -> operand','expression',1,'p_expression','Syntactic.py',72),
  ('operand -> INTEGER','operand',1,'p_operand','Syntactic.py',75),
  ('operand -> FLOAT','operand',1,'p_operand','Syntactic.py',76),
  ('operand -> NAME','operand',1,'p_operand','Syntactic.py',77),
  ('operatorArithm -> PLUS','operatorArithm',1,'p_operatorArithm','Syntactic.py',81),
  ('operatorArithm -> MINUS','operatorArithm',1,'p_operatorArithm','Syntactic.py',82),
  ('operatorArithm -> MULTIPLY','operatorArithm',1,'p_operatorArithm','Syntactic.py',83),
  ('operatorArithm -> DIVIDE','operatorArithm',1,'p_operatorArithm','Syntactic.py',84),
  ('operatorArithm -> MODULE','operatorArithm',1,'p_operatorArithm','Syntactic.py',85),
  ('power_op -> INTEGER POWER INTEGER','power_op',3,'p_power_op','Syntactic.py',90),
  ('lists -> LBRACKET argumentos RBRACKET','lists',3,'p_lists','Syntactic.py',93),
  ('lists -> LSQBRACKET argumentos RSQBRACKET','lists',3,'p_lists','Syntactic.py',94),
  ('hash -> LBRACKET pares_hash RBRACKET','hash',3,'p_hash','Syntactic.py',97),
  ('hash -> LBRACKET empty RBRACKET','hash',3,'p_hash','Syntactic.py',98),
  ('pares_hash -> par_hash','pares_hash',1,'p_pares_hash','Syntactic.py',101),
  ('pares_hash -> par_hash COMA pares_hash','pares_hash',3,'p_pares_hash','Syntactic.py',102),
  ('par_hash -> clave HASHROCKET valor','par_hash',3,'p_par_hash','Syntactic.py',105),
  ('par_hash -> clave COLON valor','par_hash',3,'p_par_hash','Syntactic.py',106),
  ('clave -> SYMBOL','clave',1,'p_clave','Syntactic.py',111),
  ('clave -> STRING','clave',1,'p_clave','Syntactic.py',112),
  ('boolean -> TRUE','boolean',1,'p_boolean','Syntactic.py',116),
  ('boolean -> FALSE','boolean',1,'p_boolean','Syntactic.py',117),
  ('operation -> operand operatorArithm operand','operation',3,'p_operation','Syntactic.py',121),
  ('operation -> operand operatorArithm operation','operation',3,'p_operation','Syntactic.py',122),
  ('if_statement -> IF condition block END','if_statement',4,'p_if_statement','Syntactic.py',127),
  ('if_statement -> IF condition block ELSE block END','if_statement',6,'p_if_statement','Syntactic.py',128),
  ('if_statement -> IF condition block ELSIF condition block END','if_statement',7,'p_if_statement','Syntactic.py',129),
  ('if_statement -> IF condition block ELSIF condition block ELSE block END','if_statement',9,'p_if_statement','Syntactic.py',130),
  ('while_statement -> WHILE condition block END','while_statement',4,'p_while_statement','Syntactic.py',134),
  ('comparison -> valor comparator valor','comparison',3,'p_comparison','Syntactic.py',137),
  ('block -> statement','block',1,'p_block','Syntactic.py',140),
  ('block -> statement block','block',2,'p_block','Syntactic.py',141),
  ('statement -> asignacion','statement',1,'p_statement','Syntactic.py',144),
  ('statement -> impresion','statement',1,'p_statement','Syntactic.py',145),
  ('statement -> if_statement','statement',1,'p_statement','Syntactic.py',146),
  ('statement -> while_statement','statement',1,'p_statement','Syntactic.py',147),
  ('statement -> instantiation','statement',1,'p_statement','Syntactic.py',148),
  ('statement -> return','statement',1,'p_statement','Syntactic.py',149),
  ('return -> RETURN argumentos','return',2,'p_return','Syntactic.py',152),
  ('condition -> comparison','condition',1,'p_condition','Syntactic.py',155),
  ('condition -> boolean','condition',1,'p_condition','Syntactic.py',156),
  ('condition -> NOT_OP comparison','condition',2,'p_condition','Syntactic.py',157),
  ('condition -> comparison operatorCond comparison','condition',3,'p_condition','Syntactic.py',158),
  ('operatorCond -> AND_OP','operatorCond',1,'p_operatorCond','Syntactic.py',161),
  ('operatorCond -> OR_OP','operatorCond',1,'p_operatorCond','Syntactic.py',162),
  ('cond -> valor comparator valor','cond',3,'p_cond','Syntactic.py',165),
  ('cond -> LPAREN comparison RPAREN','cond',3,'p_cond','Syntactic.py',166),
  ('class_definition -> CLASS CLASS_NAME body END','class_definition',4,'p_class_definition','Syntactic.py',171),
  ('instantiation -> CLASS_NAME NEW LPAREN argumentos RPAREN','instantiation',5,'p_instantiation','Syntactic.py',176),
  ('comparator -> EQ','comparator',1,'p_comparator','Syntactic.py',181),
  ('comparator -> NE','comparator',1,'p_comparator','Syntactic.py',182),
  ('comparator -> LT','comparator',1,'p_comparator','Syntactic.py',183),
  ('comparator -> LE','comparator',1,'p_comparator','Syntactic.py',184),
  ('comparator -> GT','comparator',1,'p_comparator','Syntactic.py',185),
  ('comparator -> GE','comparator',1,'p_comparator','Syntactic.py',186),
  ('empty -> <empty>','empty',0,'p_empty','Syntactic.py',189),
  ('function_definition -> DEF NAME LPAREN parameters RPAREN body END','function_definition',7,'p_function_definition','Syntactic.py',194),
  ('function_definition -> DEF NAME body END','function_definition',4,'p_function_definition','Syntactic.py',195),
  ('parameters -> NAME','parameters',1,'p_parameters','Syntactic.py',200),
  ('parameters -> NAME COMA parameters','parameters',3,'p_parameters','Syntactic.py',201),
  ('parameters -> empty','parameters',1,'p_parameters','Syntactic.py',202),
  ('body -> statement','body',1,'p_body','Syntactic.py',207),
  ('body -> statement body','body',2,'p_body','Syntactic.py',208),
]
