
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND_OP CASE CHOMP CLASS CLASS_NAME COLON COMA COMMENT DEF DIVIDE DO DOT EACH ELSE ELSIF END EQ EQUALS FALSE FLOAT FOR GE GETS GT HASHROCKET IF INITIALIZE INTEGER LBRACKET LE LPAREN LSQBRACKET LT MINUS MODULE MULTIPLY NAME NE NEW NOT_OP NULL OR_OP PIPE PLUS POWER PUTS RBRACKET RPAREN RSQBRACKET SEMICOLON STRING SYMBOL TRUE UNLESS UNTIL VARIABLE_CLASE VARIABLE_CONSTANTE VARIABLE_GLOBAL VARIABLE_INSTANCIA VARIABLE_LOCAL WHEN WHILEprogram : code\n               | code programcode : asignacion\n            | impresion\n            | solicitud_entrada\n            asignacion : NAME EQUALS valor\n                  | VARIABLE_GLOBAL EQUALS valor\n    impresion : PUTS argumentos_optsolicitud_entrada : PUTS STRING\n                         | NAME EQUALS GETS DOT CHOMP\n    argumentos_opt : argumentos\n                      | emptyargumentos : valor\n                  | valor COMA argumentosvalor : STRING\n             | INTEGER\n             | FLOAT\n             | NULL\n             | NAME\n             | SYMBOL\n             | boolean\n             | lists\n             | operation\n             | condition\n             | expression\n    lists : LBRACKET argumentos RBRACKET\n             | LSQBRACKET argumentos RSQBRACKETboolean : TRUE\n                | FALSEoperation : operand operatorArithm operand\n                 | operand operatorArithm operationexpression : expression operatorArithm expression\n                  | operandoperand : INTEGER\n               | FLOAT\n               | NAMEoperatorArithm : PLUS\n                | MINUS\n                | MULTIPLY\n                | DIVIDE\n                | MODULE\n                | POWER\n                condition : cond\n                 | NOT_OP cond\n                 | cond operatorCond cond\n                 | cond operatorCond conditionoperatorCond : AND_OP\n                    | OR_OPcond : valor comparator valorcomparator : EQ\n                  | NE\n                  | LT\n                  | LE\n                  | GT\n                  | GEempty :'
    
_lr_action_items = {'NAME':([0,2,3,4,5,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,58,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[6,6,-3,-4,-5,20,20,20,-8,-9,-11,-12,-13,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-28,-29,20,20,-33,-43,20,-6,-15,-7,20,20,-50,-51,-52,-53,-54,-55,68,-37,-38,-39,-40,-41,-42,68,20,-47,-48,-44,-14,-49,-32,-33,-34,-35,-36,-26,-27,-30,-31,-43,-46,-10,]),'VARIABLE_GLOBAL':([0,2,3,4,5,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,34,36,37,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[7,7,-3,-4,-5,-56,-8,-9,-11,-12,-13,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-28,-29,-33,-43,-6,-15,-7,-44,-14,-49,-32,-33,-34,-35,-36,-26,-27,-30,-31,-43,-46,-10,]),'PUTS':([0,2,3,4,5,8,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,34,36,37,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[8,8,-3,-4,-5,-56,-8,-9,-11,-12,-13,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-28,-29,-33,-43,-6,-15,-7,-44,-14,-49,-32,-33,-34,-35,-36,-26,-27,-30,-31,-43,-46,-10,]),'$end':([1,2,3,4,5,8,9,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,34,36,37,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[0,-1,-3,-4,-5,-56,-2,-8,-9,-11,-12,-13,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-28,-29,-33,-43,-6,-15,-7,-44,-14,-49,-32,-33,-34,-35,-36,-26,-27,-30,-31,-43,-46,-10,]),'EQUALS':([6,7,],[10,11,]),'STRING':([8,10,11,29,30,33,38,39,40,41,42,43,44,45,56,57,58,],[13,36,36,36,36,36,36,36,-50,-51,-52,-53,-54,-55,36,-47,-48,]),'INTEGER':([8,10,11,29,30,33,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,58,],[17,17,17,17,17,17,17,17,-50,-51,-52,-53,-54,-55,66,-37,-38,-39,-40,-41,-42,66,17,-47,-48,]),'FLOAT':([8,10,11,29,30,33,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,58,],[18,18,18,18,18,18,18,18,-50,-51,-52,-53,-54,-55,67,-37,-38,-39,-40,-41,-42,67,18,-47,-48,]),'NULL':([8,10,11,29,30,33,38,39,40,41,42,43,44,45,56,57,58,],[19,19,19,19,19,19,19,19,-50,-51,-52,-53,-54,-55,19,-47,-48,]),'SYMBOL':([8,10,11,29,30,33,38,39,40,41,42,43,44,45,56,57,58,],[21,21,21,21,21,21,21,21,-50,-51,-52,-53,-54,-55,21,-47,-48,]),'TRUE':([8,10,11,29,30,33,38,39,40,41,42,43,44,45,56,57,58,],[27,27,27,27,27,27,27,27,-50,-51,-52,-53,-54,-55,27,-47,-48,]),'FALSE':([8,10,11,29,30,33,38,39,40,41,42,43,44,45,56,57,58,],[28,28,28,28,28,28,28,28,-50,-51,-52,-53,-54,-55,28,-47,-48,]),'LBRACKET':([8,10,11,29,30,33,38,39,40,41,42,43,44,45,56,57,58,],[29,29,29,29,29,29,29,29,-50,-51,-52,-53,-54,-55,29,-47,-48,]),'LSQBRACKET':([8,10,11,29,30,33,38,39,40,41,42,43,44,45,56,57,58,],[30,30,30,30,30,30,30,30,-50,-51,-52,-53,-54,-55,30,-47,-48,]),'NOT_OP':([8,10,11,29,30,33,38,39,40,41,42,43,44,45,56,57,58,],[33,33,33,33,33,33,33,33,-50,-51,-52,-53,-54,-55,33,-47,-48,]),'GETS':([10,],[35,]),'COMA':([13,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,36,59,63,64,65,66,67,68,69,70,71,72,73,74,],[-15,38,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-28,-29,-33,-43,-15,-44,-49,-32,-33,-34,-35,-36,-26,-27,-30,-31,-43,-46,]),'EQ':([13,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,34,36,37,59,60,63,64,65,66,67,68,69,70,71,72,73,74,],[-15,40,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-28,-29,-33,-43,40,-15,40,-43,40,40,-32,-33,-34,-35,-36,-26,-27,-30,-31,-43,-24,]),'NE':([13,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,34,36,37,59,60,63,64,65,66,67,68,69,70,71,72,73,74,],[-15,41,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-28,-29,-33,-43,41,-15,41,-43,41,41,-32,-33,-34,-35,-36,-26,-27,-30,-31,-43,-24,]),'LT':([13,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,34,36,37,59,60,63,64,65,66,67,68,69,70,71,72,73,74,],[-15,42,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-28,-29,-33,-43,42,-15,42,-43,42,42,-32,-33,-34,-35,-36,-26,-27,-30,-31,-43,-24,]),'LE':([13,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,34,36,37,59,60,63,64,65,66,67,68,69,70,71,72,73,74,],[-15,43,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-28,-29,-33,-43,43,-15,43,-43,43,43,-32,-33,-34,-35,-36,-26,-27,-30,-31,-43,-24,]),'GT':([13,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,34,36,37,59,60,63,64,65,66,67,68,69,70,71,72,73,74,],[-15,44,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-28,-29,-33,-43,44,-15,44,-43,44,44,-32,-33,-34,-35,-36,-26,-27,-30,-31,-43,-24,]),'GE':([13,16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,34,36,37,59,60,63,64,65,66,67,68,69,70,71,72,73,74,],[-15,45,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-28,-29,-33,-43,45,-15,45,-43,45,45,-32,-33,-34,-35,-36,-26,-27,-30,-31,-43,-24,]),'RBRACKET':([16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,36,53,59,62,63,64,65,66,67,68,69,70,71,72,73,74,],[-13,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-28,-29,-33,-43,-15,69,-44,-14,-49,-32,-33,-34,-35,-36,-26,-27,-30,-31,-43,-46,]),'RSQBRACKET':([16,17,18,19,20,21,22,23,24,25,26,27,28,31,32,36,54,59,62,63,64,65,66,67,68,69,70,71,72,73,74,],[-13,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-28,-29,-33,-43,-15,70,-44,-14,-49,-32,-33,-34,-35,-36,-26,-27,-30,-31,-43,-46,]),'AND_OP':([17,18,19,20,21,22,23,24,25,26,27,28,31,32,36,59,63,64,65,66,67,68,69,70,71,72,73,74,],[-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-28,-29,-33,57,-15,57,-49,-32,-33,-34,-35,-36,-26,-27,-30,-31,57,-46,]),'OR_OP':([17,18,19,20,21,22,23,24,25,26,27,28,31,32,36,59,63,64,65,66,67,68,69,70,71,72,73,74,],[-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-28,-29,-33,58,-15,58,-49,-32,-33,-34,-35,-36,-26,-27,-30,-31,58,-46,]),'PLUS':([17,18,20,26,31,64,65,66,67,68,71,],[-34,-35,-36,47,47,47,-33,-34,-35,-36,47,]),'MINUS':([17,18,20,26,31,64,65,66,67,68,71,],[-34,-35,-36,48,48,48,-33,-34,-35,-36,48,]),'MULTIPLY':([17,18,20,26,31,64,65,66,67,68,71,],[-34,-35,-36,49,49,49,-33,-34,-35,-36,49,]),'DIVIDE':([17,18,20,26,31,64,65,66,67,68,71,],[-34,-35,-36,50,50,50,-33,-34,-35,-36,50,]),'MODULE':([17,18,20,26,31,64,65,66,67,68,71,],[-34,-35,-36,51,51,51,-33,-34,-35,-36,51,]),'POWER':([17,18,20,26,31,64,65,66,67,68,71,],[-34,-35,-36,52,52,52,-33,-34,-35,-36,52,]),'DOT':([35,],[61,]),'CHOMP':([61,],[75,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,9,]),'code':([0,2,],[2,2,]),'asignacion':([0,2,],[3,3,]),'impresion':([0,2,],[4,4,]),'solicitud_entrada':([0,2,],[5,5,]),'argumentos_opt':([8,],[12,]),'argumentos':([8,29,30,38,],[14,53,54,62,]),'empty':([8,],[15,]),'valor':([8,10,11,29,30,33,38,39,56,],[16,34,37,16,16,60,16,63,60,]),'boolean':([8,10,11,29,30,33,38,39,56,],[22,22,22,22,22,22,22,22,22,]),'lists':([8,10,11,29,30,33,38,39,56,],[23,23,23,23,23,23,23,23,23,]),'operation':([8,10,11,29,30,33,38,39,55,56,],[24,24,24,24,24,24,24,24,72,24,]),'condition':([8,10,11,29,30,33,38,39,56,],[25,25,25,25,25,25,25,25,74,]),'expression':([8,10,11,29,30,33,38,39,46,56,],[26,26,26,26,26,26,26,26,64,26,]),'operand':([8,10,11,29,30,33,38,39,46,55,56,],[31,31,31,31,31,31,31,31,65,71,31,]),'cond':([8,10,11,29,30,33,38,39,56,],[32,32,32,32,32,59,32,32,73,]),'comparator':([16,34,37,60,63,],[39,39,39,39,39,]),'operatorArithm':([26,31,64,71,],[46,55,46,55,]),'operatorCond':([32,59,73,],[56,56,56,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> code','program',1,'p_program','Syntactic.py',9),
  ('program -> code program','program',2,'p_program','Syntactic.py',10),
  ('code -> asignacion','code',1,'p_code','Syntactic.py',13),
  ('code -> impresion','code',1,'p_code','Syntactic.py',14),
  ('code -> solicitud_entrada','code',1,'p_code','Syntactic.py',15),
  ('asignacion -> NAME EQUALS valor','asignacion',3,'p_asignacion','Syntactic.py',20),
  ('asignacion -> VARIABLE_GLOBAL EQUALS valor','asignacion',3,'p_asignacion','Syntactic.py',21),
  ('impresion -> PUTS argumentos_opt','impresion',2,'p_impresion','Syntactic.py',26),
  ('solicitud_entrada -> PUTS STRING','solicitud_entrada',2,'p_solicitud_entrada','Syntactic.py',29),
  ('solicitud_entrada -> NAME EQUALS GETS DOT CHOMP','solicitud_entrada',5,'p_solicitud_entrada','Syntactic.py',30),
  ('argumentos_opt -> argumentos','argumentos_opt',1,'p_argumentos_opt','Syntactic.py',34),
  ('argumentos_opt -> empty','argumentos_opt',1,'p_argumentos_opt','Syntactic.py',35),
  ('argumentos -> valor','argumentos',1,'p_argumentos','Syntactic.py',38),
  ('argumentos -> valor COMA argumentos','argumentos',3,'p_argumentos','Syntactic.py',39),
  ('valor -> STRING','valor',1,'p_valor','Syntactic.py',42),
  ('valor -> INTEGER','valor',1,'p_valor','Syntactic.py',43),
  ('valor -> FLOAT','valor',1,'p_valor','Syntactic.py',44),
  ('valor -> NULL','valor',1,'p_valor','Syntactic.py',45),
  ('valor -> NAME','valor',1,'p_valor','Syntactic.py',46),
  ('valor -> SYMBOL','valor',1,'p_valor','Syntactic.py',47),
  ('valor -> boolean','valor',1,'p_valor','Syntactic.py',48),
  ('valor -> lists','valor',1,'p_valor','Syntactic.py',49),
  ('valor -> operation','valor',1,'p_valor','Syntactic.py',50),
  ('valor -> condition','valor',1,'p_valor','Syntactic.py',51),
  ('valor -> expression','valor',1,'p_valor','Syntactic.py',52),
  ('lists -> LBRACKET argumentos RBRACKET','lists',3,'p_lists','Syntactic.py',56),
  ('lists -> LSQBRACKET argumentos RSQBRACKET','lists',3,'p_lists','Syntactic.py',57),
  ('boolean -> TRUE','boolean',1,'p_boolean','Syntactic.py',60),
  ('boolean -> FALSE','boolean',1,'p_boolean','Syntactic.py',61),
  ('operation -> operand operatorArithm operand','operation',3,'p_operation','Syntactic.py',65),
  ('operation -> operand operatorArithm operation','operation',3,'p_operation','Syntactic.py',66),
  ('expression -> expression operatorArithm expression','expression',3,'p_expression','Syntactic.py',69),
  ('expression -> operand','expression',1,'p_expression','Syntactic.py',70),
  ('operand -> INTEGER','operand',1,'p_operand','Syntactic.py',79),
  ('operand -> FLOAT','operand',1,'p_operand','Syntactic.py',80),
  ('operand -> NAME','operand',1,'p_operand','Syntactic.py',81),
  ('operatorArithm -> PLUS','operatorArithm',1,'p_operatorArithm','Syntactic.py',85),
  ('operatorArithm -> MINUS','operatorArithm',1,'p_operatorArithm','Syntactic.py',86),
  ('operatorArithm -> MULTIPLY','operatorArithm',1,'p_operatorArithm','Syntactic.py',87),
  ('operatorArithm -> DIVIDE','operatorArithm',1,'p_operatorArithm','Syntactic.py',88),
  ('operatorArithm -> MODULE','operatorArithm',1,'p_operatorArithm','Syntactic.py',89),
  ('operatorArithm -> POWER','operatorArithm',1,'p_operatorArithm','Syntactic.py',90),
  ('condition -> cond','condition',1,'p_condition','Syntactic.py',95),
  ('condition -> NOT_OP cond','condition',2,'p_condition','Syntactic.py',96),
  ('condition -> cond operatorCond cond','condition',3,'p_condition','Syntactic.py',97),
  ('condition -> cond operatorCond condition','condition',3,'p_condition','Syntactic.py',98),
  ('operatorCond -> AND_OP','operatorCond',1,'p_operatorCond','Syntactic.py',101),
  ('operatorCond -> OR_OP','operatorCond',1,'p_operatorCond','Syntactic.py',102),
  ('cond -> valor comparator valor','cond',3,'p_cond','Syntactic.py',105),
  ('comparator -> EQ','comparator',1,'p_comparator','Syntactic.py',108),
  ('comparator -> NE','comparator',1,'p_comparator','Syntactic.py',109),
  ('comparator -> LT','comparator',1,'p_comparator','Syntactic.py',110),
  ('comparator -> LE','comparator',1,'p_comparator','Syntactic.py',111),
  ('comparator -> GT','comparator',1,'p_comparator','Syntactic.py',112),
  ('comparator -> GE','comparator',1,'p_comparator','Syntactic.py',113),
  ('empty -> <empty>','empty',0,'p_empty','Syntactic.py',116),
]
